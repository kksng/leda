// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`DropDownSelect ATTRIBUTES should display custom values with JSX 1`] = `
Object {
  "asFragment": [Function],
  "baseElement": <body>
    <div>
      <div
        class="dropdownselect-wrapper"
      >
        <div
          class="dropdownselect-input-wrapper"
        >
          <input
            aria-invalid="false"
            aria-required="false"
            autocomplete="off"
            class="dropdownselect-input"
            placeholder="placeholder"
            readonly=""
            value=""
          />
          <span
            class="dropdownselect-select-icon opened"
          />
        </div>
        <div
          class="suggestion-wrapper visible"
        >
          <ul
            class="suggestion-list"
          >
            <li
              class="suggestion-item"
            >
              --one--
            </li>
            <li
              class="suggestion-item"
            >
              --two--
            </li>
          </ul>
        </div>
      </div>
    </div>
  </body>,
  "container": <div>
    <div
      class="dropdownselect-wrapper"
    >
      <div
        class="dropdownselect-input-wrapper"
      >
        <input
          aria-invalid="false"
          aria-required="false"
          autocomplete="off"
          class="dropdownselect-input"
          placeholder="placeholder"
          readonly=""
          value=""
        />
        <span
          class="dropdownselect-select-icon opened"
        />
      </div>
      <div
        class="suggestion-wrapper visible"
      >
        <ul
          class="suggestion-list"
        >
          <li
            class="suggestion-item"
          >
            --one--
          </li>
          <li
            class="suggestion-item"
          >
            --two--
          </li>
        </ul>
      </div>
    </div>
  </div>,
  "debug": [Function],
  "findAllByAltText": [Function],
  "findAllByDisplayValue": [Function],
  "findAllByLabelText": [Function],
  "findAllByPlaceholderText": [Function],
  "findAllByRole": [Function],
  "findAllByTestId": [Function],
  "findAllByText": [Function],
  "findAllByTitle": [Function],
  "findByAltText": [Function],
  "findByDisplayValue": [Function],
  "findByLabelText": [Function],
  "findByPlaceholderText": [Function],
  "findByRole": [Function],
  "findByTestId": [Function],
  "findByText": [Function],
  "findByTitle": [Function],
  "getAllByAltText": [Function],
  "getAllByDisplayValue": [Function],
  "getAllByLabelText": [Function],
  "getAllByPlaceholderText": [Function],
  "getAllByRole": [Function],
  "getAllByTestId": [Function],
  "getAllByText": [Function],
  "getAllByTitle": [Function],
  "getByAltText": [Function],
  "getByDisplayValue": [Function],
  "getByLabelText": [Function],
  "getByPlaceholderText": [Function],
  "getByRole": [Function],
  "getByTestId": [Function],
  "getByText": [Function],
  "getByTitle": [Function],
  "queryAllByAltText": [Function],
  "queryAllByDisplayValue": [Function],
  "queryAllByLabelText": [Function],
  "queryAllByPlaceholderText": [Function],
  "queryAllByRole": [Function],
  "queryAllByTestId": [Function],
  "queryAllByText": [Function],
  "queryAllByTitle": [Function],
  "queryByAltText": [Function],
  "queryByDisplayValue": [Function],
  "queryByLabelText": [Function],
  "queryByPlaceholderText": [Function],
  "queryByRole": [Function],
  "queryByTestId": [Function],
  "queryByText": [Function],
  "queryByTitle": [Function],
  "rerender": [Function],
  "unmount": [Function],
}
`;

exports[`DropDownSelect ATTRIBUTES should display custom values with string data 1`] = `
Object {
  "asFragment": [Function],
  "baseElement": <body>
    <div>
      <div
        class="dropdownselect-wrapper"
      >
        <div
          class="dropdownselect-input-wrapper"
        >
          <input
            aria-invalid="false"
            aria-required="false"
            autocomplete="off"
            class="dropdownselect-input"
            placeholder="placeholder"
            readonly=""
            value=""
          />
          <span
            class="dropdownselect-select-icon opened"
          />
        </div>
        <div
          class="suggestion-wrapper visible"
        >
          <ul
            class="suggestion-list"
          >
            <li
              class="suggestion-item placeholder"
            >
              --placeholder--
            </li>
            <li
              class="suggestion-item"
            >
              --one--
            </li>
            <li
              class="suggestion-item"
            >
              --two--
            </li>
          </ul>
        </div>
      </div>
    </div>
  </body>,
  "container": <div>
    <div
      class="dropdownselect-wrapper"
    >
      <div
        class="dropdownselect-input-wrapper"
      >
        <input
          aria-invalid="false"
          aria-required="false"
          autocomplete="off"
          class="dropdownselect-input"
          placeholder="placeholder"
          readonly=""
          value=""
        />
        <span
          class="dropdownselect-select-icon opened"
        />
      </div>
      <div
        class="suggestion-wrapper visible"
      >
        <ul
          class="suggestion-list"
        >
          <li
            class="suggestion-item placeholder"
          >
            --placeholder--
          </li>
          <li
            class="suggestion-item"
          >
            --one--
          </li>
          <li
            class="suggestion-item"
          >
            --two--
          </li>
        </ul>
      </div>
    </div>
  </div>,
  "debug": [Function],
  "findAllByAltText": [Function],
  "findAllByDisplayValue": [Function],
  "findAllByLabelText": [Function],
  "findAllByPlaceholderText": [Function],
  "findAllByRole": [Function],
  "findAllByTestId": [Function],
  "findAllByText": [Function],
  "findAllByTitle": [Function],
  "findByAltText": [Function],
  "findByDisplayValue": [Function],
  "findByLabelText": [Function],
  "findByPlaceholderText": [Function],
  "findByRole": [Function],
  "findByTestId": [Function],
  "findByText": [Function],
  "findByTitle": [Function],
  "getAllByAltText": [Function],
  "getAllByDisplayValue": [Function],
  "getAllByLabelText": [Function],
  "getAllByPlaceholderText": [Function],
  "getAllByRole": [Function],
  "getAllByTestId": [Function],
  "getAllByText": [Function],
  "getAllByTitle": [Function],
  "getByAltText": [Function],
  "getByDisplayValue": [Function],
  "getByLabelText": [Function],
  "getByPlaceholderText": [Function],
  "getByRole": [Function],
  "getByTestId": [Function],
  "getByText": [Function],
  "getByTitle": [Function],
  "queryAllByAltText": [Function],
  "queryAllByDisplayValue": [Function],
  "queryAllByLabelText": [Function],
  "queryAllByPlaceholderText": [Function],
  "queryAllByRole": [Function],
  "queryAllByTestId": [Function],
  "queryAllByText": [Function],
  "queryAllByTitle": [Function],
  "queryByAltText": [Function],
  "queryByDisplayValue": [Function],
  "queryByLabelText": [Function],
  "queryByPlaceholderText": [Function],
  "queryByRole": [Function],
  "queryByTestId": [Function],
  "queryByText": [Function],
  "queryByTitle": [Function],
  "rerender": [Function],
  "unmount": [Function],
}
`;

exports[`DropDownSelect ATTRIBUTES should display loader if dataLoading 1`] = `
Object {
  "asFragment": [Function],
  "baseElement": <body>
    <div>
      <div
        class="dropdownselect-wrapper box"
      >
        <div
          class="dropdownselect-input-wrapper"
        >
          <input
            aria-invalid="false"
            aria-required="false"
            autocomplete="off"
            class="dropdownselect-input"
            readonly=""
            value=""
          />
          <span
            class="dropdownselect-select-icon opened"
          />
        </div>
        <div
          class="suggestion-wrapper visible"
        >
          <div
            class="loader-wrapper"
          >
            <div
              class="loader-container"
            >
              <span
                class="loader-element"
              />
            </div>
          </div>
        </div>
      </div>
    </div>
  </body>,
  "container": <div>
    <div
      class="dropdownselect-wrapper box"
    >
      <div
        class="dropdownselect-input-wrapper"
      >
        <input
          aria-invalid="false"
          aria-required="false"
          autocomplete="off"
          class="dropdownselect-input"
          readonly=""
          value=""
        />
        <span
          class="dropdownselect-select-icon opened"
        />
      </div>
      <div
        class="suggestion-wrapper visible"
      >
        <div
          class="loader-wrapper"
        >
          <div
            class="loader-container"
          >
            <span
              class="loader-element"
            />
          </div>
        </div>
      </div>
    </div>
  </div>,
  "debug": [Function],
  "findAllByAltText": [Function],
  "findAllByDisplayValue": [Function],
  "findAllByLabelText": [Function],
  "findAllByPlaceholderText": [Function],
  "findAllByRole": [Function],
  "findAllByTestId": [Function],
  "findAllByText": [Function],
  "findAllByTitle": [Function],
  "findByAltText": [Function],
  "findByDisplayValue": [Function],
  "findByLabelText": [Function],
  "findByPlaceholderText": [Function],
  "findByRole": [Function],
  "findByTestId": [Function],
  "findByText": [Function],
  "findByTitle": [Function],
  "getAllByAltText": [Function],
  "getAllByDisplayValue": [Function],
  "getAllByLabelText": [Function],
  "getAllByPlaceholderText": [Function],
  "getAllByRole": [Function],
  "getAllByTestId": [Function],
  "getAllByText": [Function],
  "getAllByTitle": [Function],
  "getByAltText": [Function],
  "getByDisplayValue": [Function],
  "getByLabelText": [Function],
  "getByPlaceholderText": [Function],
  "getByRole": [Function],
  "getByTestId": [Function],
  "getByText": [Function],
  "getByTitle": [Function],
  "queryAllByAltText": [Function],
  "queryAllByDisplayValue": [Function],
  "queryAllByLabelText": [Function],
  "queryAllByPlaceholderText": [Function],
  "queryAllByRole": [Function],
  "queryAllByTestId": [Function],
  "queryAllByText": [Function],
  "queryAllByTitle": [Function],
  "queryByAltText": [Function],
  "queryByDisplayValue": [Function],
  "queryByLabelText": [Function],
  "queryByPlaceholderText": [Function],
  "queryByRole": [Function],
  "queryByTestId": [Function],
  "queryByText": [Function],
  "queryByTitle": [Function],
  "rerender": [Function],
  "unmount": [Function],
}
`;

exports[`DropDownSelect ATTRIBUTES should display noDataTemplate if no data 1`] = `
Object {
  "asFragment": [Function],
  "baseElement": <body>
    <div>
      <div
        class="dropdownselect-wrapper box"
      >
        <div
          class="dropdownselect-input-wrapper"
        >
          <input
            aria-invalid="false"
            aria-required="false"
            autocomplete="off"
            class="dropdownselect-input"
            readonly=""
            value=""
          />
          <span
            class="dropdownselect-select-icon opened"
          />
        </div>
        <div
          class="suggestion-wrapper visible"
        >
          <span
            class="nodata"
          >
            no data we are sorry
          </span>
        </div>
      </div>
    </div>
  </body>,
  "container": <div>
    <div
      class="dropdownselect-wrapper box"
    >
      <div
        class="dropdownselect-input-wrapper"
      >
        <input
          aria-invalid="false"
          aria-required="false"
          autocomplete="off"
          class="dropdownselect-input"
          readonly=""
          value=""
        />
        <span
          class="dropdownselect-select-icon opened"
        />
      </div>
      <div
        class="suggestion-wrapper visible"
      >
        <span
          class="nodata"
        >
          no data we are sorry
        </span>
      </div>
    </div>
  </div>,
  "debug": [Function],
  "findAllByAltText": [Function],
  "findAllByDisplayValue": [Function],
  "findAllByLabelText": [Function],
  "findAllByPlaceholderText": [Function],
  "findAllByRole": [Function],
  "findAllByTestId": [Function],
  "findAllByText": [Function],
  "findAllByTitle": [Function],
  "findByAltText": [Function],
  "findByDisplayValue": [Function],
  "findByLabelText": [Function],
  "findByPlaceholderText": [Function],
  "findByRole": [Function],
  "findByTestId": [Function],
  "findByText": [Function],
  "findByTitle": [Function],
  "getAllByAltText": [Function],
  "getAllByDisplayValue": [Function],
  "getAllByLabelText": [Function],
  "getAllByPlaceholderText": [Function],
  "getAllByRole": [Function],
  "getAllByTestId": [Function],
  "getAllByText": [Function],
  "getAllByTitle": [Function],
  "getByAltText": [Function],
  "getByDisplayValue": [Function],
  "getByLabelText": [Function],
  "getByPlaceholderText": [Function],
  "getByRole": [Function],
  "getByTestId": [Function],
  "getByText": [Function],
  "getByTitle": [Function],
  "queryAllByAltText": [Function],
  "queryAllByDisplayValue": [Function],
  "queryAllByLabelText": [Function],
  "queryAllByPlaceholderText": [Function],
  "queryAllByRole": [Function],
  "queryAllByTestId": [Function],
  "queryAllByText": [Function],
  "queryAllByTitle": [Function],
  "queryByAltText": [Function],
  "queryByDisplayValue": [Function],
  "queryByLabelText": [Function],
  "queryByPlaceholderText": [Function],
  "queryByRole": [Function],
  "queryByTestId": [Function],
  "queryByText": [Function],
  "queryByTitle": [Function],
  "rerender": [Function],
  "unmount": [Function],
}
`;

exports[`DropDownSelect ATTRIBUTES should render custom values with object data 1`] = `
Object {
  "asFragment": [Function],
  "baseElement": <body>
    <div>
      <div
        class="dropdownselect-wrapper"
      >
        <div
          class="dropdownselect-input-wrapper"
        >
          <input
            aria-invalid="false"
            aria-required="false"
            autocomplete="off"
            class="dropdownselect-input"
            placeholder="placeholder"
            readonly=""
            value=""
          />
          <span
            class="dropdownselect-select-icon opened"
          />
        </div>
        <div
          class="suggestion-wrapper visible"
        >
          <ul
            class="suggestion-list"
          >
            <li
              class="suggestion-item"
            >
              --value0--
            </li>
            <li
              class="suggestion-item"
            >
              --value1--
            </li>
          </ul>
        </div>
      </div>
    </div>
  </body>,
  "container": <div>
    <div
      class="dropdownselect-wrapper"
    >
      <div
        class="dropdownselect-input-wrapper"
      >
        <input
          aria-invalid="false"
          aria-required="false"
          autocomplete="off"
          class="dropdownselect-input"
          placeholder="placeholder"
          readonly=""
          value=""
        />
        <span
          class="dropdownselect-select-icon opened"
        />
      </div>
      <div
        class="suggestion-wrapper visible"
      >
        <ul
          class="suggestion-list"
        >
          <li
            class="suggestion-item"
          >
            --value0--
          </li>
          <li
            class="suggestion-item"
          >
            --value1--
          </li>
        </ul>
      </div>
    </div>
  </div>,
  "debug": [Function],
  "findAllByAltText": [Function],
  "findAllByDisplayValue": [Function],
  "findAllByLabelText": [Function],
  "findAllByPlaceholderText": [Function],
  "findAllByRole": [Function],
  "findAllByTestId": [Function],
  "findAllByText": [Function],
  "findAllByTitle": [Function],
  "findByAltText": [Function],
  "findByDisplayValue": [Function],
  "findByLabelText": [Function],
  "findByPlaceholderText": [Function],
  "findByRole": [Function],
  "findByTestId": [Function],
  "findByText": [Function],
  "findByTitle": [Function],
  "getAllByAltText": [Function],
  "getAllByDisplayValue": [Function],
  "getAllByLabelText": [Function],
  "getAllByPlaceholderText": [Function],
  "getAllByRole": [Function],
  "getAllByTestId": [Function],
  "getAllByText": [Function],
  "getAllByTitle": [Function],
  "getByAltText": [Function],
  "getByDisplayValue": [Function],
  "getByLabelText": [Function],
  "getByPlaceholderText": [Function],
  "getByRole": [Function],
  "getByTestId": [Function],
  "getByText": [Function],
  "getByTitle": [Function],
  "queryAllByAltText": [Function],
  "queryAllByDisplayValue": [Function],
  "queryAllByLabelText": [Function],
  "queryAllByPlaceholderText": [Function],
  "queryAllByRole": [Function],
  "queryAllByTestId": [Function],
  "queryAllByText": [Function],
  "queryAllByTitle": [Function],
  "queryByAltText": [Function],
  "queryByDisplayValue": [Function],
  "queryByLabelText": [Function],
  "queryByPlaceholderText": [Function],
  "queryByRole": [Function],
  "queryByTestId": [Function],
  "queryByText": [Function],
  "queryByTitle": [Function],
  "rerender": [Function],
  "unmount": [Function],
}
`;

exports[`DropDownSelect SNAPSHOTS controllable mode should render data 1`] = `
Object {
  "asFragment": [Function],
  "baseElement": <body>
    <div>
      <div
        class="dropdownselect-wrapper"
      >
        <div
          class="dropdownselect-input-wrapper focused"
        >
          <input
            aria-invalid="false"
            aria-required="false"
            autocomplete="off"
            class="dropdownselect-input"
            readonly=""
            value=""
          />
          <span
            class="dropdownselect-select-icon opened"
          />
        </div>
        <div
          class="suggestion-wrapper visible"
        >
          <ul
            class="suggestion-list"
          >
            <li
              class="suggestion-item"
            >
              value0
            </li>
            <li
              class="suggestion-item"
            >
              value1
            </li>
          </ul>
        </div>
      </div>
    </div>
  </body>,
  "container": <div>
    <div
      class="dropdownselect-wrapper"
    >
      <div
        class="dropdownselect-input-wrapper focused"
      >
        <input
          aria-invalid="false"
          aria-required="false"
          autocomplete="off"
          class="dropdownselect-input"
          readonly=""
          value=""
        />
        <span
          class="dropdownselect-select-icon opened"
        />
      </div>
      <div
        class="suggestion-wrapper visible"
      >
        <ul
          class="suggestion-list"
        >
          <li
            class="suggestion-item"
          >
            value0
          </li>
          <li
            class="suggestion-item"
          >
            value1
          </li>
        </ul>
      </div>
    </div>
  </div>,
  "debug": [Function],
  "findAllByAltText": [Function],
  "findAllByDisplayValue": [Function],
  "findAllByLabelText": [Function],
  "findAllByPlaceholderText": [Function],
  "findAllByRole": [Function],
  "findAllByTestId": [Function],
  "findAllByText": [Function],
  "findAllByTitle": [Function],
  "findByAltText": [Function],
  "findByDisplayValue": [Function],
  "findByLabelText": [Function],
  "findByPlaceholderText": [Function],
  "findByRole": [Function],
  "findByTestId": [Function],
  "findByText": [Function],
  "findByTitle": [Function],
  "getAllByAltText": [Function],
  "getAllByDisplayValue": [Function],
  "getAllByLabelText": [Function],
  "getAllByPlaceholderText": [Function],
  "getAllByRole": [Function],
  "getAllByTestId": [Function],
  "getAllByText": [Function],
  "getAllByTitle": [Function],
  "getByAltText": [Function],
  "getByDisplayValue": [Function],
  "getByLabelText": [Function],
  "getByPlaceholderText": [Function],
  "getByRole": [Function],
  "getByTestId": [Function],
  "getByText": [Function],
  "getByTitle": [Function],
  "queryAllByAltText": [Function],
  "queryAllByDisplayValue": [Function],
  "queryAllByLabelText": [Function],
  "queryAllByPlaceholderText": [Function],
  "queryAllByRole": [Function],
  "queryAllByTestId": [Function],
  "queryAllByText": [Function],
  "queryAllByTitle": [Function],
  "queryByAltText": [Function],
  "queryByDisplayValue": [Function],
  "queryByLabelText": [Function],
  "queryByPlaceholderText": [Function],
  "queryByRole": [Function],
  "queryByTestId": [Function],
  "queryByText": [Function],
  "queryByTitle": [Function],
  "rerender": [Function],
  "unmount": [Function],
}
`;

exports[`DropDownSelect SNAPSHOTS controllable mode should render data 2`] = `
Object {
  "asFragment": [Function],
  "baseElement": <body>
    <div>
      <div
        class="dropdownselect-wrapper"
      >
        <div
          class="dropdownselect-input-wrapper focused"
        >
          <input
            aria-invalid="false"
            aria-required="false"
            autocomplete="off"
            class="dropdownselect-input"
            readonly=""
            value=""
          />
          <span
            class="dropdownselect-select-icon opened"
          />
        </div>
        <div
          class="suggestion-wrapper visible"
        >
          <ul
            class="suggestion-list"
          >
            <li
              class="suggestion-item"
            >
              value0
            </li>
            <li
              class="suggestion-item"
            >
              value1
            </li>
          </ul>
        </div>
      </div>
    </div>
  </body>,
  "container": <div>
    <div
      class="dropdownselect-wrapper"
    >
      <div
        class="dropdownselect-input-wrapper focused"
      >
        <input
          aria-invalid="false"
          aria-required="false"
          autocomplete="off"
          class="dropdownselect-input"
          readonly=""
          value=""
        />
        <span
          class="dropdownselect-select-icon opened"
        />
      </div>
      <div
        class="suggestion-wrapper visible"
      >
        <ul
          class="suggestion-list"
        >
          <li
            class="suggestion-item"
          >
            value0
          </li>
          <li
            class="suggestion-item"
          >
            value1
          </li>
        </ul>
      </div>
    </div>
  </div>,
  "debug": [Function],
  "findAllByAltText": [Function],
  "findAllByDisplayValue": [Function],
  "findAllByLabelText": [Function],
  "findAllByPlaceholderText": [Function],
  "findAllByRole": [Function],
  "findAllByTestId": [Function],
  "findAllByText": [Function],
  "findAllByTitle": [Function],
  "findByAltText": [Function],
  "findByDisplayValue": [Function],
  "findByLabelText": [Function],
  "findByPlaceholderText": [Function],
  "findByRole": [Function],
  "findByTestId": [Function],
  "findByText": [Function],
  "findByTitle": [Function],
  "getAllByAltText": [Function],
  "getAllByDisplayValue": [Function],
  "getAllByLabelText": [Function],
  "getAllByPlaceholderText": [Function],
  "getAllByRole": [Function],
  "getAllByTestId": [Function],
  "getAllByText": [Function],
  "getAllByTitle": [Function],
  "getByAltText": [Function],
  "getByDisplayValue": [Function],
  "getByLabelText": [Function],
  "getByPlaceholderText": [Function],
  "getByRole": [Function],
  "getByTestId": [Function],
  "getByText": [Function],
  "getByTitle": [Function],
  "queryAllByAltText": [Function],
  "queryAllByDisplayValue": [Function],
  "queryAllByLabelText": [Function],
  "queryAllByPlaceholderText": [Function],
  "queryAllByRole": [Function],
  "queryAllByTestId": [Function],
  "queryAllByText": [Function],
  "queryAllByTitle": [Function],
  "queryByAltText": [Function],
  "queryByDisplayValue": [Function],
  "queryByLabelText": [Function],
  "queryByPlaceholderText": [Function],
  "queryByRole": [Function],
  "queryByTestId": [Function],
  "queryByText": [Function],
  "queryByTitle": [Function],
  "rerender": [Function],
  "unmount": [Function],
}
`;

exports[`DropDownSelect SNAPSHOTS controllable mode should render value 1`] = `
Object {
  "asFragment": [Function],
  "baseElement": <body>
    <div>
      <div
        class="dropdownselect-wrapper"
      >
        <div
          class="dropdownselect-input-wrapper"
        >
          <input
            aria-invalid="false"
            aria-required="false"
            autocomplete="off"
            class="dropdownselect-input"
            placeholder=""
            readonly=""
            value="value0"
          />
          <span
            class="dropdownselect-select-icon closed"
          />
        </div>
      </div>
    </div>
  </body>,
  "container": <div>
    <div
      class="dropdownselect-wrapper"
    >
      <div
        class="dropdownselect-input-wrapper"
      >
        <input
          aria-invalid="false"
          aria-required="false"
          autocomplete="off"
          class="dropdownselect-input"
          placeholder=""
          readonly=""
          value="value0"
        />
        <span
          class="dropdownselect-select-icon closed"
        />
      </div>
    </div>
  </div>,
  "debug": [Function],
  "findAllByAltText": [Function],
  "findAllByDisplayValue": [Function],
  "findAllByLabelText": [Function],
  "findAllByPlaceholderText": [Function],
  "findAllByRole": [Function],
  "findAllByTestId": [Function],
  "findAllByText": [Function],
  "findAllByTitle": [Function],
  "findByAltText": [Function],
  "findByDisplayValue": [Function],
  "findByLabelText": [Function],
  "findByPlaceholderText": [Function],
  "findByRole": [Function],
  "findByTestId": [Function],
  "findByText": [Function],
  "findByTitle": [Function],
  "getAllByAltText": [Function],
  "getAllByDisplayValue": [Function],
  "getAllByLabelText": [Function],
  "getAllByPlaceholderText": [Function],
  "getAllByRole": [Function],
  "getAllByTestId": [Function],
  "getAllByText": [Function],
  "getAllByTitle": [Function],
  "getByAltText": [Function],
  "getByDisplayValue": [Function],
  "getByLabelText": [Function],
  "getByPlaceholderText": [Function],
  "getByRole": [Function],
  "getByTestId": [Function],
  "getByText": [Function],
  "getByTitle": [Function],
  "queryAllByAltText": [Function],
  "queryAllByDisplayValue": [Function],
  "queryAllByLabelText": [Function],
  "queryAllByPlaceholderText": [Function],
  "queryAllByRole": [Function],
  "queryAllByTestId": [Function],
  "queryAllByText": [Function],
  "queryAllByTitle": [Function],
  "queryByAltText": [Function],
  "queryByDisplayValue": [Function],
  "queryByLabelText": [Function],
  "queryByPlaceholderText": [Function],
  "queryByRole": [Function],
  "queryByTestId": [Function],
  "queryByText": [Function],
  "queryByTitle": [Function],
  "rerender": [Function],
  "unmount": [Function],
}
`;

exports[`DropDownSelect SNAPSHOTS controllable mode should render value 2`] = `
Object {
  "asFragment": [Function],
  "baseElement": <body>
    <div>
      <div
        class="dropdownselect-wrapper"
      >
        <div
          class="dropdownselect-input-wrapper"
        >
          <input
            aria-invalid="false"
            aria-required="false"
            autocomplete="off"
            class="dropdownselect-input"
            placeholder=""
            readonly=""
            value="value1"
          />
          <span
            class="dropdownselect-select-icon closed"
          />
        </div>
      </div>
    </div>
  </body>,
  "container": <div>
    <div
      class="dropdownselect-wrapper"
    >
      <div
        class="dropdownselect-input-wrapper"
      >
        <input
          aria-invalid="false"
          aria-required="false"
          autocomplete="off"
          class="dropdownselect-input"
          placeholder=""
          readonly=""
          value="value1"
        />
        <span
          class="dropdownselect-select-icon closed"
        />
      </div>
    </div>
  </div>,
  "debug": [Function],
  "findAllByAltText": [Function],
  "findAllByDisplayValue": [Function],
  "findAllByLabelText": [Function],
  "findAllByPlaceholderText": [Function],
  "findAllByRole": [Function],
  "findAllByTestId": [Function],
  "findAllByText": [Function],
  "findAllByTitle": [Function],
  "findByAltText": [Function],
  "findByDisplayValue": [Function],
  "findByLabelText": [Function],
  "findByPlaceholderText": [Function],
  "findByRole": [Function],
  "findByTestId": [Function],
  "findByText": [Function],
  "findByTitle": [Function],
  "getAllByAltText": [Function],
  "getAllByDisplayValue": [Function],
  "getAllByLabelText": [Function],
  "getAllByPlaceholderText": [Function],
  "getAllByRole": [Function],
  "getAllByTestId": [Function],
  "getAllByText": [Function],
  "getAllByTitle": [Function],
  "getByAltText": [Function],
  "getByDisplayValue": [Function],
  "getByLabelText": [Function],
  "getByPlaceholderText": [Function],
  "getByRole": [Function],
  "getByTestId": [Function],
  "getByText": [Function],
  "getByTitle": [Function],
  "queryAllByAltText": [Function],
  "queryAllByDisplayValue": [Function],
  "queryAllByLabelText": [Function],
  "queryAllByPlaceholderText": [Function],
  "queryAllByRole": [Function],
  "queryAllByTestId": [Function],
  "queryAllByText": [Function],
  "queryAllByTitle": [Function],
  "queryByAltText": [Function],
  "queryByDisplayValue": [Function],
  "queryByLabelText": [Function],
  "queryByPlaceholderText": [Function],
  "queryByRole": [Function],
  "queryByTestId": [Function],
  "queryByText": [Function],
  "queryByTitle": [Function],
  "rerender": [Function],
  "unmount": [Function],
}
`;

exports[`DropDownSelect SNAPSHOTS multi-type attributes data should render object data 1`] = `
Object {
  "asFragment": [Function],
  "baseElement": <body>
    <div>
      <div
        class="dropdownselect-wrapper"
      >
        <div
          class="dropdownselect-input-wrapper"
        >
          <input
            aria-invalid="false"
            aria-required="false"
            autocomplete="off"
            class="dropdownselect-input"
            readonly=""
            value=""
          />
          <span
            class="dropdownselect-select-icon opened"
          />
        </div>
        <div
          class="suggestion-wrapper visible"
        >
          <ul
            class="suggestion-list"
          >
            <li
              class="suggestion-item"
            >
              value0
            </li>
            <li
              class="suggestion-item"
            >
              value1
            </li>
          </ul>
        </div>
      </div>
    </div>
  </body>,
  "container": <div>
    <div
      class="dropdownselect-wrapper"
    >
      <div
        class="dropdownselect-input-wrapper"
      >
        <input
          aria-invalid="false"
          aria-required="false"
          autocomplete="off"
          class="dropdownselect-input"
          readonly=""
          value=""
        />
        <span
          class="dropdownselect-select-icon opened"
        />
      </div>
      <div
        class="suggestion-wrapper visible"
      >
        <ul
          class="suggestion-list"
        >
          <li
            class="suggestion-item"
          >
            value0
          </li>
          <li
            class="suggestion-item"
          >
            value1
          </li>
        </ul>
      </div>
    </div>
  </div>,
  "debug": [Function],
  "findAllByAltText": [Function],
  "findAllByDisplayValue": [Function],
  "findAllByLabelText": [Function],
  "findAllByPlaceholderText": [Function],
  "findAllByRole": [Function],
  "findAllByTestId": [Function],
  "findAllByText": [Function],
  "findAllByTitle": [Function],
  "findByAltText": [Function],
  "findByDisplayValue": [Function],
  "findByLabelText": [Function],
  "findByPlaceholderText": [Function],
  "findByRole": [Function],
  "findByTestId": [Function],
  "findByText": [Function],
  "findByTitle": [Function],
  "getAllByAltText": [Function],
  "getAllByDisplayValue": [Function],
  "getAllByLabelText": [Function],
  "getAllByPlaceholderText": [Function],
  "getAllByRole": [Function],
  "getAllByTestId": [Function],
  "getAllByText": [Function],
  "getAllByTitle": [Function],
  "getByAltText": [Function],
  "getByDisplayValue": [Function],
  "getByLabelText": [Function],
  "getByPlaceholderText": [Function],
  "getByRole": [Function],
  "getByTestId": [Function],
  "getByText": [Function],
  "getByTitle": [Function],
  "queryAllByAltText": [Function],
  "queryAllByDisplayValue": [Function],
  "queryAllByLabelText": [Function],
  "queryAllByPlaceholderText": [Function],
  "queryAllByRole": [Function],
  "queryAllByTestId": [Function],
  "queryAllByText": [Function],
  "queryAllByTitle": [Function],
  "queryByAltText": [Function],
  "queryByDisplayValue": [Function],
  "queryByLabelText": [Function],
  "queryByPlaceholderText": [Function],
  "queryByRole": [Function],
  "queryByTestId": [Function],
  "queryByText": [Function],
  "queryByTitle": [Function],
  "rerender": [Function],
  "unmount": [Function],
}
`;

exports[`DropDownSelect SNAPSHOTS multi-type attributes data should render string data 1`] = `
Object {
  "asFragment": [Function],
  "baseElement": <body>
    <div>
      <div
        class="dropdownselect-wrapper"
      >
        <div
          class="dropdownselect-input-wrapper"
        >
          <input
            aria-invalid="false"
            aria-required="false"
            autocomplete="off"
            class="dropdownselect-input"
            readonly=""
            value=""
          />
          <span
            class="dropdownselect-select-icon opened"
          />
        </div>
        <div
          class="suggestion-wrapper visible"
        >
          <ul
            class="suggestion-list"
          >
            <li
              class="suggestion-item"
            >
              value0
            </li>
            <li
              class="suggestion-item"
            >
              value1
            </li>
          </ul>
        </div>
      </div>
    </div>
  </body>,
  "container": <div>
    <div
      class="dropdownselect-wrapper"
    >
      <div
        class="dropdownselect-input-wrapper"
      >
        <input
          aria-invalid="false"
          aria-required="false"
          autocomplete="off"
          class="dropdownselect-input"
          readonly=""
          value=""
        />
        <span
          class="dropdownselect-select-icon opened"
        />
      </div>
      <div
        class="suggestion-wrapper visible"
      >
        <ul
          class="suggestion-list"
        >
          <li
            class="suggestion-item"
          >
            value0
          </li>
          <li
            class="suggestion-item"
          >
            value1
          </li>
        </ul>
      </div>
    </div>
  </div>,
  "debug": [Function],
  "findAllByAltText": [Function],
  "findAllByDisplayValue": [Function],
  "findAllByLabelText": [Function],
  "findAllByPlaceholderText": [Function],
  "findAllByRole": [Function],
  "findAllByTestId": [Function],
  "findAllByText": [Function],
  "findAllByTitle": [Function],
  "findByAltText": [Function],
  "findByDisplayValue": [Function],
  "findByLabelText": [Function],
  "findByPlaceholderText": [Function],
  "findByRole": [Function],
  "findByTestId": [Function],
  "findByText": [Function],
  "findByTitle": [Function],
  "getAllByAltText": [Function],
  "getAllByDisplayValue": [Function],
  "getAllByLabelText": [Function],
  "getAllByPlaceholderText": [Function],
  "getAllByRole": [Function],
  "getAllByTestId": [Function],
  "getAllByText": [Function],
  "getAllByTitle": [Function],
  "getByAltText": [Function],
  "getByDisplayValue": [Function],
  "getByLabelText": [Function],
  "getByPlaceholderText": [Function],
  "getByRole": [Function],
  "getByTestId": [Function],
  "getByText": [Function],
  "getByTitle": [Function],
  "queryAllByAltText": [Function],
  "queryAllByDisplayValue": [Function],
  "queryAllByLabelText": [Function],
  "queryAllByPlaceholderText": [Function],
  "queryAllByRole": [Function],
  "queryAllByTestId": [Function],
  "queryAllByText": [Function],
  "queryAllByTitle": [Function],
  "queryByAltText": [Function],
  "queryByDisplayValue": [Function],
  "queryByLabelText": [Function],
  "queryByPlaceholderText": [Function],
  "queryByRole": [Function],
  "queryByTestId": [Function],
  "queryByText": [Function],
  "queryByTitle": [Function],
  "rerender": [Function],
  "unmount": [Function],
}
`;

exports[`DropDownSelect SNAPSHOTS multi-type attributes should render string placeholder 1`] = `
Object {
  "asFragment": [Function],
  "baseElement": <body>
    <div>
      <div
        class="dropdownselect-wrapper"
      >
        <div
          class="dropdownselect-input-wrapper"
        >
          <input
            aria-invalid="false"
            aria-required="false"
            autocomplete="off"
            class="dropdownselect-input"
            placeholder="placeholder"
            readonly=""
            value=""
          />
          <span
            class="dropdownselect-select-icon closed"
          />
        </div>
      </div>
    </div>
  </body>,
  "container": <div>
    <div
      class="dropdownselect-wrapper"
    >
      <div
        class="dropdownselect-input-wrapper"
      >
        <input
          aria-invalid="false"
          aria-required="false"
          autocomplete="off"
          class="dropdownselect-input"
          placeholder="placeholder"
          readonly=""
          value=""
        />
        <span
          class="dropdownselect-select-icon closed"
        />
      </div>
    </div>
  </div>,
  "debug": [Function],
  "findAllByAltText": [Function],
  "findAllByDisplayValue": [Function],
  "findAllByLabelText": [Function],
  "findAllByPlaceholderText": [Function],
  "findAllByRole": [Function],
  "findAllByTestId": [Function],
  "findAllByText": [Function],
  "findAllByTitle": [Function],
  "findByAltText": [Function],
  "findByDisplayValue": [Function],
  "findByLabelText": [Function],
  "findByPlaceholderText": [Function],
  "findByRole": [Function],
  "findByTestId": [Function],
  "findByText": [Function],
  "findByTitle": [Function],
  "getAllByAltText": [Function],
  "getAllByDisplayValue": [Function],
  "getAllByLabelText": [Function],
  "getAllByPlaceholderText": [Function],
  "getAllByRole": [Function],
  "getAllByTestId": [Function],
  "getAllByText": [Function],
  "getAllByTitle": [Function],
  "getByAltText": [Function],
  "getByDisplayValue": [Function],
  "getByLabelText": [Function],
  "getByPlaceholderText": [Function],
  "getByRole": [Function],
  "getByTestId": [Function],
  "getByText": [Function],
  "getByTitle": [Function],
  "queryAllByAltText": [Function],
  "queryAllByDisplayValue": [Function],
  "queryAllByLabelText": [Function],
  "queryAllByPlaceholderText": [Function],
  "queryAllByRole": [Function],
  "queryAllByTestId": [Function],
  "queryAllByText": [Function],
  "queryAllByTitle": [Function],
  "queryByAltText": [Function],
  "queryByDisplayValue": [Function],
  "queryByLabelText": [Function],
  "queryByPlaceholderText": [Function],
  "queryByRole": [Function],
  "queryByTestId": [Function],
  "queryByText": [Function],
  "queryByTitle": [Function],
  "rerender": [Function],
  "unmount": [Function],
}
`;

exports[`DropDownSelect SNAPSHOTS should render 1`] = `
Object {
  "asFragment": [Function],
  "baseElement": <body>
    <div>
      <div
        class="dropdownselect-wrapper"
      >
        <div
          class="dropdownselect-input-wrapper"
        >
          <input
            aria-invalid="false"
            aria-required="false"
            autocomplete="off"
            class="dropdownselect-input"
            readonly=""
            value=""
          />
          <span
            class="dropdownselect-select-icon closed"
          />
        </div>
      </div>
    </div>
  </body>,
  "container": <div>
    <div
      class="dropdownselect-wrapper"
    >
      <div
        class="dropdownselect-input-wrapper"
      >
        <input
          aria-invalid="false"
          aria-required="false"
          autocomplete="off"
          class="dropdownselect-input"
          readonly=""
          value=""
        />
        <span
          class="dropdownselect-select-icon closed"
        />
      </div>
    </div>
  </div>,
  "debug": [Function],
  "findAllByAltText": [Function],
  "findAllByDisplayValue": [Function],
  "findAllByLabelText": [Function],
  "findAllByPlaceholderText": [Function],
  "findAllByRole": [Function],
  "findAllByTestId": [Function],
  "findAllByText": [Function],
  "findAllByTitle": [Function],
  "findByAltText": [Function],
  "findByDisplayValue": [Function],
  "findByLabelText": [Function],
  "findByPlaceholderText": [Function],
  "findByRole": [Function],
  "findByTestId": [Function],
  "findByText": [Function],
  "findByTitle": [Function],
  "getAllByAltText": [Function],
  "getAllByDisplayValue": [Function],
  "getAllByLabelText": [Function],
  "getAllByPlaceholderText": [Function],
  "getAllByRole": [Function],
  "getAllByTestId": [Function],
  "getAllByText": [Function],
  "getAllByTitle": [Function],
  "getByAltText": [Function],
  "getByDisplayValue": [Function],
  "getByLabelText": [Function],
  "getByPlaceholderText": [Function],
  "getByRole": [Function],
  "getByTestId": [Function],
  "getByText": [Function],
  "getByTitle": [Function],
  "queryAllByAltText": [Function],
  "queryAllByDisplayValue": [Function],
  "queryAllByLabelText": [Function],
  "queryAllByPlaceholderText": [Function],
  "queryAllByRole": [Function],
  "queryAllByTestId": [Function],
  "queryAllByText": [Function],
  "queryAllByTitle": [Function],
  "queryByAltText": [Function],
  "queryByDisplayValue": [Function],
  "queryByLabelText": [Function],
  "queryByPlaceholderText": [Function],
  "queryByRole": [Function],
  "queryByTestId": [Function],
  "queryByText": [Function],
  "queryByTitle": [Function],
  "rerender": [Function],
  "unmount": [Function],
}
`;

exports[`DropDownSelect SNAPSHOTS should test different component states should be disabled 1`] = `
Object {
  "asFragment": [Function],
  "baseElement": <body>
    <div>
      <div
        class="dropdownselect-wrapper"
      >
        <div
          class="dropdownselect-input-wrapper disabled"
        >
          <input
            aria-invalid="false"
            aria-required="false"
            autocomplete="off"
            class="dropdownselect-input"
            disabled=""
            readonly=""
            value=""
          />
          <span
            class="dropdownselect-select-icon closed"
          />
        </div>
      </div>
    </div>
  </body>,
  "container": <div>
    <div
      class="dropdownselect-wrapper"
    >
      <div
        class="dropdownselect-input-wrapper disabled"
      >
        <input
          aria-invalid="false"
          aria-required="false"
          autocomplete="off"
          class="dropdownselect-input"
          disabled=""
          readonly=""
          value=""
        />
        <span
          class="dropdownselect-select-icon closed"
        />
      </div>
    </div>
  </div>,
  "debug": [Function],
  "findAllByAltText": [Function],
  "findAllByDisplayValue": [Function],
  "findAllByLabelText": [Function],
  "findAllByPlaceholderText": [Function],
  "findAllByRole": [Function],
  "findAllByTestId": [Function],
  "findAllByText": [Function],
  "findAllByTitle": [Function],
  "findByAltText": [Function],
  "findByDisplayValue": [Function],
  "findByLabelText": [Function],
  "findByPlaceholderText": [Function],
  "findByRole": [Function],
  "findByTestId": [Function],
  "findByText": [Function],
  "findByTitle": [Function],
  "getAllByAltText": [Function],
  "getAllByDisplayValue": [Function],
  "getAllByLabelText": [Function],
  "getAllByPlaceholderText": [Function],
  "getAllByRole": [Function],
  "getAllByTestId": [Function],
  "getAllByText": [Function],
  "getAllByTitle": [Function],
  "getByAltText": [Function],
  "getByDisplayValue": [Function],
  "getByLabelText": [Function],
  "getByPlaceholderText": [Function],
  "getByRole": [Function],
  "getByTestId": [Function],
  "getByText": [Function],
  "getByTitle": [Function],
  "queryAllByAltText": [Function],
  "queryAllByDisplayValue": [Function],
  "queryAllByLabelText": [Function],
  "queryAllByPlaceholderText": [Function],
  "queryAllByRole": [Function],
  "queryAllByTestId": [Function],
  "queryAllByText": [Function],
  "queryAllByTitle": [Function],
  "queryByAltText": [Function],
  "queryByDisplayValue": [Function],
  "queryByLabelText": [Function],
  "queryByPlaceholderText": [Function],
  "queryByRole": [Function],
  "queryByTestId": [Function],
  "queryByText": [Function],
  "queryByTitle": [Function],
  "rerender": [Function],
  "unmount": [Function],
}
`;

exports[`DropDownSelect SNAPSHOTS should test different component states should be isOpen 1`] = `
Object {
  "asFragment": [Function],
  "baseElement": <body>
    <div>
      <div
        class="dropdownselect-wrapper"
      >
        <div
          class="dropdownselect-input-wrapper"
        >
          <input
            aria-invalid="false"
            aria-required="false"
            autocomplete="off"
            class="dropdownselect-input"
            readonly=""
            value=""
          />
          <span
            class="dropdownselect-select-icon opened"
          />
        </div>
        <div
          class="suggestion-wrapper visible"
        >
          <ul
            class="suggestion-list"
          >
            <li
              class="suggestion-item"
            >
              value0
            </li>
            <li
              class="suggestion-item"
            >
              value1
            </li>
          </ul>
        </div>
      </div>
    </div>
  </body>,
  "container": <div>
    <div
      class="dropdownselect-wrapper"
    >
      <div
        class="dropdownselect-input-wrapper"
      >
        <input
          aria-invalid="false"
          aria-required="false"
          autocomplete="off"
          class="dropdownselect-input"
          readonly=""
          value=""
        />
        <span
          class="dropdownselect-select-icon opened"
        />
      </div>
      <div
        class="suggestion-wrapper visible"
      >
        <ul
          class="suggestion-list"
        >
          <li
            class="suggestion-item"
          >
            value0
          </li>
          <li
            class="suggestion-item"
          >
            value1
          </li>
        </ul>
      </div>
    </div>
  </div>,
  "debug": [Function],
  "findAllByAltText": [Function],
  "findAllByDisplayValue": [Function],
  "findAllByLabelText": [Function],
  "findAllByPlaceholderText": [Function],
  "findAllByRole": [Function],
  "findAllByTestId": [Function],
  "findAllByText": [Function],
  "findAllByTitle": [Function],
  "findByAltText": [Function],
  "findByDisplayValue": [Function],
  "findByLabelText": [Function],
  "findByPlaceholderText": [Function],
  "findByRole": [Function],
  "findByTestId": [Function],
  "findByText": [Function],
  "findByTitle": [Function],
  "getAllByAltText": [Function],
  "getAllByDisplayValue": [Function],
  "getAllByLabelText": [Function],
  "getAllByPlaceholderText": [Function],
  "getAllByRole": [Function],
  "getAllByTestId": [Function],
  "getAllByText": [Function],
  "getAllByTitle": [Function],
  "getByAltText": [Function],
  "getByDisplayValue": [Function],
  "getByLabelText": [Function],
  "getByPlaceholderText": [Function],
  "getByRole": [Function],
  "getByTestId": [Function],
  "getByText": [Function],
  "getByTitle": [Function],
  "queryAllByAltText": [Function],
  "queryAllByDisplayValue": [Function],
  "queryAllByLabelText": [Function],
  "queryAllByPlaceholderText": [Function],
  "queryAllByRole": [Function],
  "queryAllByTestId": [Function],
  "queryAllByText": [Function],
  "queryAllByTitle": [Function],
  "queryByAltText": [Function],
  "queryByDisplayValue": [Function],
  "queryByLabelText": [Function],
  "queryByPlaceholderText": [Function],
  "queryByRole": [Function],
  "queryByTestId": [Function],
  "queryByText": [Function],
  "queryByTitle": [Function],
  "rerender": [Function],
  "unmount": [Function],
}
`;
